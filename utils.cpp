#include "utils.h"

// Ham ma hoa mat khau
string hashPassword(const string& password) {
    return to_string(hash<string>{}(password));
}

// Ham tao mat khau ngau nhien
string generateRandomPassword(int length) {
    const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()";
    string password;
    srand(time(0));

    for (int i = 0; i < length; i++) {
        password += chars[rand() % chars.size()];
    }

    return password;
}

// Ham tim ID lon nhat trong cac tep info.json
int getMaxUserId(const std::string& usersDir) {
    int maxId = 0;
    
    // Duyet qua tat ca cac thu muc con trong thu muc users
    for (const auto& entry : fs::directory_iterator(usersDir)) {
        if (entry.is_directory()) {
            std::string filePath = entry.path().string() + "/info.json";
            if (fs::exists(filePath)) {
                std::ifstream file(filePath);
                json userData;
                file >> userData;
                
                // Kiem tra xem tep co truong "id" hay khong
                if (userData.contains("user_id")) {
                    int userId = userData["user_id"];
                    maxId = std::max(maxId, userId);  // Cap nhat ID lon nhat
                }
            }
        }
    }
    
    return maxId;
}

// Luu thong tin dang nhap vao settings.json
void saveUserCredentials(const string& username, const string& hashedPassword, bool isAutoGenerated) {
    string filePath = "users/" + username + "/settings.json";
    fs::create_directories("users/" + username);  // Tao thu muc neu chua co

    ofstream file(filePath);
    if (!file.is_open()) {
        cerr << "Loi: Khong the luu thong tin dang nhap!\n";
        return;
    }

    // Danh sach thong tin theo thu tu
    vector<pair<string, string>> settings = {        
        {"Username", username},
        {"Role", "Nguoi_Dung"},
        {"Password", hashedPassword},
        {"isAutoGenerated", isAutoGenerated ? "true" : "false"}
    };

    // Ghi ra file JSON theo thu tu
    file << "{\n";
    for (size_t i = 0; i < settings.size(); i++) {
        file << "    \"" << settings[i].first << "\": ";
        if (settings[i].first == "isAutoGenerated") {
            file << settings[i].second;
        } else {
            file << "\"" << settings[i].second << "\"";
        }
        if (i != settings.size() - 1) file << ",";
        file << "\n";
    }
    file << "}\n";

    file.close();
}


// Doc thong tin dang nhap tu settings.json
json loadUserCredentials(const string& username) {
    string filePath = "users/" + username + "/settings.json";
    ifstream file(filePath);
    if (!file.is_open()) {
        cerr << "Loi: Khong tim thay tai khoan!\n";
        return {};
    }

    json credentials;
    file >> credentials;
    file.close();
    return credentials;
}

// Luu thong tin ca nhan vao info.json
void saveUserInfo(const std::string& username, json& userData) {
    // Duong dan toi thu muc nguoi dung
    std::string usersDir = "./users/";
    std::string userDir = usersDir + username;
    fs::create_directories(userDir);  // Tao thu muc neu chua ton tai

    // Them truong "Points" neu chua co
    if (!userData.contains("Points")) {
        userData["Points"] = 0;
    }

    // Lay ID lon nhat tu cac tep info.json
    int maxId = getMaxUserId(usersDir);

    // Neu chua co user_id, gan ID moi
    if (!userData.contains("user_id")) {
        userData["user_id"] = maxId + 1;
    }

    std::string filePath = userDir + "/info.json";

    // Mo file de ghi
    std::ofstream file(filePath);
    if (!file.is_open()) {
        std::cerr << "Loi: Khong the luu du lieu!\n";
        return;
    }

    // Tao vector de luu tru cac cap key-value theo thu tu mong muon
    std::vector<std::pair<std::string, std::string>> orderedData = {
        {"user_id", std::to_string(userData["user_id"].get<int>())},
        {"FullName", userData["FullName"].get<std::string>()},
        {"Gender", userData["Gender"].get<std::string>()},
        {"Email", userData["Email"].get<std::string>()},
        {"Phone", userData["Phone"].get<std::string>()},
        {"Address", userData["Address"].get<std::string>()},
        {"Points", std::to_string(userData["Points"].get<int>())}
    };

    // Ghi du lieu ra file theo dung thu tu
    file << "{\n";
    for (size_t i = 0; i < orderedData.size(); i++) {
        file << "    \"" << orderedData[i].first << "\": ";
        if (orderedData[i].first == "user_id" || orderedData[i].first == "Points") {
            file << orderedData[i].second; // Khong can dau nhay kep cho so
        } else {
            file << "\"" << orderedData[i].second << "\"";
        }
        if (i != orderedData.size() - 1) file << ",";
        file << "\n";
    }
    file << "}\n";

    file.close();
}

// Doc thong tin ca nhan tu info.json
json loadUserInfo(const string& username) {
    string filePath = "users/" + username + "/info.json";
    ifstream file(filePath);
    if (!file.is_open()) {
        cerr << "Loi: Khong tim thay thong tin ca nhan!\n";
        return {};
    }

    json userData;
    file >> userData;
    file.close();
    return userData;
}

std::string trim(const std::string& str) {
    size_t first = str.find_first_not_of(" \t\n\r");
    if (first == std::string::npos) return "";
    size_t last = str.find_last_not_of(" \t\n\r");
    return str.substr(first, (last - first + 1));
}

void logManagerAction(const std::string& managerUsername, const std::string& action) {
    std::ofstream logFile("manager_actions.log", std::ios::app);
    if (logFile.is_open()) {
        auto now = std::chrono::system_clock::now();
        std::time_t now_time = std::chrono::system_clock::to_time_t(now);
        logFile << std::put_time(std::localtime(&now_time), "%Y-%m-%d %H:%M:%S") 
                << " | " << managerUsername << " | " << action << "\n";
        logFile.close();
    }
}