#include "manager.h"
#include "utils.h"
#include "otp.h"
#include <iostream>
#include <fstream>
#include <filesystem>
#include <iomanip>

namespace fs = std::filesystem;
using json = nlohmann::json;

std::vector<UserInfo> getUserList() {
    std::vector<UserInfo> userList;
    std::string usersDir = "users";
    
    if (!fs::exists(usersDir)) {
        std::cerr << "Users directory not found!" << std::endl;
        return userList;
    }

    for (const auto& entry : fs::directory_iterator(usersDir)) {
        if (entry.is_directory()) {
            std::string username = entry.path().filename().string();
            std::string settingsPath = entry.path().string() + "/settings.json";
            
            if (fs::exists(settingsPath)) {
                std::ifstream file(settingsPath);
                json userData;
                file >> userData;
                
                UserInfo info;
                info.username = username;
                if (userData.contains("Role")) info.role = userData["Role"];
                if (userData.contains("Email")) info.email = userData["Email"];
                
                std::string infoPath = entry.path().string() + "/info.json";
                if (fs::exists(infoPath)) {
                    std::ifstream infoFile(infoPath);
                    json userInfo;
                    infoFile >> userInfo;
                    if (userInfo.contains("FullName")) info.fullName = userInfo["FullName"];
                }
                
                userList.push_back(info);
            }
        }
    }
    
    return userList;
}

void createNewUser() {
    std::string username, password, role;
    
    // Nhập thông tin tài khoản
    std::cout << "\n===== TAO TAI KHOAN MOI =====\n";
    std::cout << "Nhap ten dang nhap: ";
    std::cin >> username;
    
    // Kiểm tra tài khoản đã tồn tại chưa
    if (fs::exists("users/" + username + "/settings.json")) {
        std::cout << "Tai khoan da ton tai!\n";
        return;
    }
    
    std::cout << "Nhap mat khau: ";
    std::cin >> password;
    
    std::cout << "Chon loai tai khoan (1. Quan_Ly / 2. Nguoi_Dung): ";
    int roleChoice;
    std::cin >> roleChoice;
    role = (roleChoice == 1) ? "Quan_Ly" : "Nguoi_Dung";
    
    // Tạo thư mục người dùng
    fs::create_directories("users/" + username);
    
    // Lưu thông tin đăng nhập
    json settings;
    settings["Username"] = username;
    settings["Password"] = hashPassword(password);
    settings["Role"] = role;
    settings["isAutoGenerated"] = false;
    
    std::ofstream settingsFile("users/" + username + "/settings.json");
    settingsFile << settings.dump(4);
    settingsFile.close();
    
    // Tạo file thông tin cá nhân
    json userInfo;
    userInfo["user_id"] = getMaxUserId("users") + 1;
    userInfo["FullName"] = "";
    userInfo["Email"] = "";
    userInfo["Phone"] = "";
    userInfo["Address"] = "";
    userInfo["Points"] = 0;
    
    std::ofstream infoFile("users/" + username + "/info.json");
    infoFile << userInfo.dump(4);
    infoFile.close();
    
    std::cout << "Tao tai khoan thanh cong!\n";
}

void modifyUserInfo(const std::string& managerUsername) {
    std::cout << "\n===== MODIFY USER INFO =====\n";
    
    // Get list of users
    auto userList = getUserList();
    if (userList.empty()) {
        std::cout << "No users found!\n";
        return;
    }
    
    // Display user list
    std::cout << "User List:\n";
    for (size_t i = 0; i < userList.size(); ++i) {
        std::cout << i+1 << ". " << userList[i].username 
                  << " (" << userList[i].fullName << ")"
                  << " - " << userList[i].role << "\n";
    }
    
    // Select user to modify
    std::cout << "Select user to modify (0 to cancel): ";
    size_t choice;
    std::cin >> choice;
    
    if (choice == 0 || choice > userList.size()) {
        std::cout << "Operation cancelled.\n";
        return;
    }
    
    const std::string& targetUsername = userList[choice-1].username;
    const std::string& targetEmail = userList[choice-1].email;
    
    // Load user data
    std::string settingsPath = "users/" + targetUsername + "/settings.json";
    std::string infoPath = "users/" + targetUsername + "/info.json";
    
    json settings, info;
    
    // Read settings
    std::ifstream settingsFile(settingsPath);
    if (settingsFile.is_open()) {
        settingsFile >> settings;
        settingsFile.close();
    }
    
    // Read info
    std::ifstream infoFile(infoPath);
    if (infoFile.is_open()) {
        infoFile >> info;
        infoFile.close();
    }
    
    // Display current info
    std::cout << "\nCurrent Information for " << targetUsername << ":\n";
    for (auto& [key, value] : info.items()) {
        std::cout << key << ": " << value << "\n";
    }
    
    // Get modifications
    std::cout << "\nEnter fields to modify (comma separated, e.g. FullName,Email): ";
    std::string fieldsInput;
    std::cin.ignore();
    std::getline(std::cin, fieldsInput);
    
    // Parse fields
    std::vector<std::string> fields;
    size_t pos = 0;
    while ((pos = fieldsInput.find(',')) != std::string::npos) {
        std::string field = fieldsInput.substr(0, pos);
        fields.push_back(trim(field));
        fieldsInput.erase(0, pos + 1);
    }
    fields.push_back(trim(fieldsInput));
    
    // Get new values
    json modifications;
    for (const auto& field : fields) {
        if (info.contains(field) || field == "Role") {
            std::cout << "Enter new value for " << field << ": ";
            std::string newValue;
            std::getline(std::cin, newValue);
            
            if (field == "Role") {
                settings[field] = newValue;
            } else {
                modifications[field] = newValue;
            }
        } else {
            std::cout << "Field " << field << " not found in user info.\n";
        }
    }
    
    if (modifications.empty() && !settings.contains("Role")) {
        std::cout << "No valid modifications made.\n";
        return;
    }
    
    // Generate OTP
    std::string otp = generateOTP();
    std::cout << "OTP generated: " << otp << " (this would be sent to user's email)\n";
    
    std::cout << "\nThong tin se thay doi:\n";
    for (const auto& field : fields) {
        if (field == "Role") {
            std::cout << field << ": " << settings[field] << "\n";
        } else if (modifications.contains(field)) {
            std::cout << field << ": " << modifications[field] << "\n";
        }
    }

    std::cout << "\nDa gui ma OTP den email cua nguoi dung. Vui long yeu cau nguoi dung cung cap ma OTP.\n";

    // In a real system, we would send this OTP to the user's email
    if (!sendOTP(targetEmail, otp)) {
        std::cout << "Failed to send OTP. Modification cancelled.\n";
        return;
    }
    
    // Verify OTP
    std::cout << "Enter OTP received by user: ";
    std::string userOTP;
    std::cin >> userOTP;
    
    if (!verifyOTP(otp, userOTP)) {
        std::cout << "Invalid OTP. Modification cancelled.\n";
        return;
    }
    
    // Apply modifications
    if (!modifications.empty()) {
        for (auto& [key, value] : modifications.items()) {
            info[key] = value;
        }
        
        std::ofstream infoOut(infoPath);
        infoOut << info.dump(4);
        infoOut.close();
    }
    
    if (settings.contains("Role")) {
        std::ofstream settingsOut(settingsPath);
        settingsOut << settings.dump(4);
        settingsOut.close();
    }
    
    std::cout << "User information updated successfully!\n";
    
    // Log this action
    logManagerAction(managerUsername, "Modified info for user: " + targetUsername);
}